import Head from 'next/head'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Button } from '../components/Button'
import { ErrorMessage } from '@hookform/error-message'
import { api } from '../utils/api'
import { signIn } from 'next-auth/react'

export const signUpSchema = z
  .object({
    email: z.string().email(),
    password: z.string().min(4).max(14),
    confirm: z.string().min(4).max(14)
  })
  .refine((data) => data.confirm === data.password, {
    message: "Passwords don't match",
    path: ['confirm']
  })

type SignUpSchemaType = z.infer<typeof signUpSchema>

export default function SignUp() {
  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues
  } = useForm<SignUpSchemaType>({
    resolver: zodResolver(signUpSchema)
  })
  const { mutate } = api.auth.signUp.useMutation({
    onSuccess: async () => {
      const { email, password } = getValues()
      await signIn(
        'credentials',
        {
          callbackUrl: process.env.VERCEL_URL
            ? process.env.VERCEL_URL
            : 'http://localhost:3000/'
        },
        {
          email,
          password
        }
      )
    }
  })

  const onSubmit = async (values: SignUpSchemaType) => {
    mutate(values)
  }

  return (
    <>
      <Head>
        <title>Listy - Dashboard</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <form onSubmit={handleSubmit(onSubmit)}>
          <input type='email' {...register('email')} />
          <ErrorMessage
            errors={errors}
            name='email'
            render={({ message }) => <p>{message}</p>}
          />

          <input type='password' {...register('password')} />
          <ErrorMessage
            errors={errors}
            name='password'
            render={({ message }) => <p>{message}</p>}
          />

          <input type='password' {...register('confirm')} />
          <ErrorMessage
            errors={errors}
            name='confirm'
            render={({ message }) => <p>{message}</p>}
          />

          <Button props={{ type: 'submit' }}>Sign up</Button>
        </form>
      </main>
    </>
  )
}
