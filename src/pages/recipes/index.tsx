import Head from 'next/head'
import Layout from '../../components/Layout'
import { useRouter } from 'next/router'
import { api } from '../../utils/api'
import { Recipe } from '@prisma/client'
import Image from 'next/image'
import Link from 'next/link'
import defaultRecipeJpeg from '../../assets/default-recipe.jpeg'
import { Modal } from '../../components/Modal'
import {
  Step,
  TotalSteps,
  TransitionWrapper
} from '../../components/TransitionWrapper'
import { Dialog } from '@headlessui/react'
import { useState } from 'react'
import { CreateRecipeForm } from '../../components/CreateRecipeForm'
import { Button } from '../../components/Button'
import { CreateRecipeParams } from '../../server/api/routers/recipes'
import { FormSkeleton } from '../../components/FormSkeleton'
import {
  LinkedData,
  ScrapedRecipe
} from '../../server/helpers/parse-recipe-url'
import { useForm } from 'react-hook-form'
import { ErrorMessage } from '@hookform/error-message'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'

export default function Recipes() {
  return (
    <>
      <Head>
        <title>Listy - Recipes</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <ListRecent />
      </Layout>
    </>
  )
}

export function ListRecent() {
  const router = useRouter()
  const { data, isSuccess } = api.recipes.entity.useQuery(undefined, {
    onError: (err) => {
      if (err.data?.code === 'UNAUTHORIZED') {
        void router.push('/')
      }
    }
  })

  if (isSuccess) {
    return (
      <div className='container mx-auto px-2'>
        <h1>Recent Recipes</h1>
        <div className='grid grid-cols-2 gap-5 md:grid-cols-4'>
          <CardList data={Object.values(data)} />
        </div>
      </div>
    )
  }
  return <p>Loading...</p>
}

function CardList({ data }: { data: Recipe[] }) {
  const toReturn: JSX.Element[] = [
    <CreateRecipeCard key='create-recipe-card' />
  ]
  toReturn.push(...data.map((recipe) => <Card key={recipe.id} data={recipe} />))
  return <>{toReturn}</>
}

function Card({ data }: { data: Recipe }) {
  let address: React.ReactNode = null
  if (data.address) {
    address = (
      <a href={data.address} className=''>
        {data.address}
      </a>
    )
  }

  let author: React.ReactNode = null
  if (data.author) {
    author = <p className=''>{data.author}</p>
  }

  const name = data.name.replaceAll('&', 'and')

  return (
    <Link
      href={`/recipes/${data.id}?name=${name}`}
      key={data.id}
      className='flex cursor-default flex-col overflow-hidden rounded bg-white shadow-xl dark:bg-slate-800'
    >
      <div className='w-full'>
        <Image
          src={data.imgUrl || defaultRecipeJpeg}
          alt='recipe'
          className='object-top'
          priority
        />
      </div>
      <div className='flex flex-col'>
        {address}
        {author}
        <h3 className=''>{data.name}</h3>
      </div>
    </Link>
  )
}

function CreateRecipeCard() {
  return (
    <div className='flex flex-col overflow-hidden rounded bg-white shadow-xl dark:bg-slate-800'>
      <CreateRecipePopover />
    </div>
  )
}

function CreateRecipePopover() {
  const { isOpen, steps, currentStep, openModal, closeModal } = useParseRecipe()

  return (
    <>
      <div className='flex items-center justify-center'>
        <button
          type='button'
          onClick={openModal}
          className='rounded-md bg-black bg-opacity-20 px-4 py-2 text-sm font-medium text-white hover:bg-opacity-30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75'
        >
          Create from website
        </button>
      </div>
      <Modal closeModal={closeModal} isOpen={isOpen}>
        <TransitionWrapper currentStep={currentStep} steps={steps} />
      </Modal>
    </>
  )
}

export function useParseRecipe() {
  const {
    data: parsedDataOnClient,
    fetchRecipe,
    status
  } = useParseRecipeOnClient()
  const parseRecipeOnServer = api.recipes.parseRecipeUrl.useMutation()

  let data = parsedDataOnClient
  if (parseRecipeOnServer.status === 'success') {
    data = parseRecipeOnServer.data
  }

  const isError = parseRecipeOnServer.status === 'error'
  const isSuccess =
    status === 'success' || parseRecipeOnServer.status === 'success'

  const steps: TotalSteps = {
    first: {
      key: 'first',
      next: 'second',
      prev: null,
      component: (
        <>
          <Dialog.Title as='h3' className='text-lg font-medium leading-6'>
            Generate a recipe with recipebot. Examples: Im feeling flirty, I
            have chicken, brocoli, and spinich
          </Dialog.Title>
          <UploadRecipeUrlForm onSubmit={onSubmitUrl} />
        </>
      )
    },
    second: {
      key: 'second',
      next: null,
      prev: 'first',
      component: (
        <>
          <Dialog.Title as='h3' className='text-lg font-medium leading-6'>
            Generate a recipe with recipebot. Examples: Im feeling flirty, I
            have chicken, brocoli, and spinich
          </Dialog.Title>
          <CreateRecipe
            closeModal={closeModal}
            data={data}
            isError={isError}
            isSuccess={isSuccess}
          />
        </>
      )
    }
  } as const

  const [isOpen, setIsOpen] = useState(false)

  const [currentStep, setCurrentStep] = useState<Step | undefined>(steps.first)

  function closeModal() {
    setIsOpen(false)
    setTimeout(() => {
      // to show UI change after closing modal
      setCurrentStep(steps.first)
    }, 200)
  }

  function openModal() {
    setIsOpen(true)
  }

  function nextStep() {
    setCurrentStep((state) => steps[state?.next as keyof typeof steps])
  }

  async function onSubmitUrl({ url }: { url: string }) {
    const isSuccessOnClient = await fetchRecipe(url)

    if (!isSuccessOnClient) {
      parseRecipeOnServer.mutate(url)
    }

    nextStep()
  }

  return { isOpen, steps, currentStep, openModal, closeModal }
}

const recipeUrlSchema = z.object({
  url: z.string().url('Enter a valid url that contains a recipe.')
})

type RecipeUrlSchemaType = z.infer<typeof recipeUrlSchema>

export function UploadRecipeUrlForm({
  onSubmit
}: {
  onSubmit(values: RecipeUrlSchemaType): void
}) {
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<RecipeUrlSchemaType>({
    resolver: zodResolver(recipeUrlSchema)
  })

  return (
    <form onSubmit={handleSubmit(onSubmit)} className=''>
      <div className='mt-2 flex flex-col gap-1'>
        <label htmlFor='url' className='text-sm text-gray-500'>
          Recipe URL
        </label>
        <input
          {...register('url')}
          className='select-auto bg-white text-gray-500 dark:bg-slate-400'
          autoFocus
        />
        <ErrorMessage
          errors={errors}
          name='url'
          render={({ message }) => <p>{message}</p>}
        />
      </div>
      <div className='mt-4'>
        <Button type='submit'>Upload</Button>
      </div>
    </form>
  )
}

export type FormValues = {
  name: string
  description: string
  instructions: string
  ingredients: string
}

export function CreateRecipe({
  data,
  isError,
  isSuccess,
  closeModal
}: {
  data: ScrapedRecipe | undefined
  isError: boolean
  isSuccess: boolean
  closeModal: () => void
}) {
  if (isError) {
    return <p className=''>Oops, something went wrong</p>
  }

  if (isSuccess && data) {
    if (data.parsingType === 'linkedData') {
      return <CreateRecipeSuccess closeModal={closeModal} data={data} />
    } else return <p>Oops something went wrong</p>
  }

  return <FormSkeleton />
}

function CreateRecipeSuccess({
  data,
  closeModal
}: {
  data: LinkedData
  closeModal: () => void
}) {
  const util = api.useContext()

  const form = useForm<FormValues>({
    defaultValues: {
      description: data.description || '',
      name: data.name || data.headline || '',
      ingredients: data.recipeIngredient?.join('\n') || '',
      instructions: data.recipeInstructions?.map((i) => i.text).join('\n') || ''
    }
  })

  const { mutate, isLoading } = api.recipes.create.useMutation({
    onSuccess: async () => {
      util.recipes.entity.invalidate()
      closeModal()
    }
  })

  const onSubmit = (values: FormValues) => {
    const params: CreateRecipeParams = {
      ...values,
      ingredients: values.ingredients.split('\n'),
      instructions: values.instructions.split('\n')
    }
    mutate(params)
  }

  return (
    <CreateRecipeForm
      form={form}
      onSubmit={onSubmit}
      slot={
        <div className='mt-4'>
          <Button isLoading={isLoading} type='submit' disabled={isLoading}>
            {isLoading ? 'Saving...' : 'Save'}
          </Button>
        </div>
      }
    />
  )
}

export function useParseRecipeOnClient() {
  const [data, setData] = useState<ScrapedRecipe>()
  const [status, setStatus] = useState<
    'idle' | 'failed' | 'loading' | 'success'
  >('idle')

  async function fetchRecipe(url: string) {
    try {
      setStatus('loading')

      const response = await fetch(url)

      const html = await response.text()

      let openScriptIdx = 0
      let closeScriptIdx = 0
      let foundLinkedData = false
      for (let i = 0; i < html.length - 4; i++) {
        const char1 = html[i]
        const char2 = html[i + 1]
        const char3 = html[i + 2]
        const char4 = html[i + 3]
        const char5 = html[i + 4]

        if (
          char1 === 'l' &&
          char2 === 'd' &&
          char3 === '+' &&
          char4 === 'j' &&
          char5 === 's'
        ) {
          foundLinkedData = true
          openScriptIdx = i + 9
        } else if (
          foundLinkedData &&
          char1 === '<' &&
          char2 === '/' &&
          char3 === 's' &&
          char4 === 'c' &&
          char5 === 'r'
        ) {
          closeScriptIdx = i
          break
        }
      }

      const scrapedRecipe = JSON.parse(
        html.slice(openScriptIdx, closeScriptIdx)
      ) as ScrapedRecipe

      setData(scrapedRecipe)
      setStatus('success')
      return true
    } catch (error) {
      setStatus('failed')
      return false
    }
  }

  return { fetchRecipe, data, status }
}
