import Head from 'next/head'
import Layout from './layout'
import React, { Fragment, useState } from 'react'
import {
  dehydrate,
  QueryClient,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import * as http from '../client'
import { Recipe } from '@prisma/client'
import { z } from 'zod'
import { useForm } from 'react-hook-form'
import {
  ParsedRecipe,
  ParseRecipeResponse,
  ParseRecipeSchema
} from './api/recipes/parse-url'
import { Dialog, Transition } from '@headlessui/react'
import { Button } from '../components/Button'
import { CreateRecipeParams } from './api/recipes/create'
import {
  Step,
  TotalSteps,
  TransitionWrapper
} from '../components/TransitionWrapper'

const recipeKeys = {
  all: ['recipes'] as const,
  parsed: () => [...recipeKeys.all, 'parsed'] as const
}

type FetchRecipesReq = {
  userId: number
}

type FetchRecipesRes = {
  recipe: Recipe
}

const fetchRecipesParams = {
  userId: 1
}

const fetchRecipes = () =>
  http.post<FetchRecipesReq, FetchRecipesRes[]>(
    'http://localhost:3000/api/recipes',
    fetchRecipesParams
  )

const queryClient = new QueryClient()

export async function getServerSideProps() {
  await queryClient.prefetchQuery(recipeKeys.all, fetchRecipes)

  return {
    props: {
      dehydratedState: dehydrate(queryClient)
    }
  }
}

export default function Dashboard() {
  const {
    data: recipes,
    isError,
    isSuccess
  } = useQuery({
    queryKey: recipeKeys.all,
    queryFn: fetchRecipes
  })

  if (isError) {
    return 'Something went wrong'
  }

  if (isSuccess) {
    const recentRecipes = recipes.map((item) => (
      <div key={item.recipe.id} className=''>
        <h3 className=''>{item.recipe.name}</h3>
      </div>
    ))
    return (
      <>
        <Head>
          <title>Listy - Dashboard</title>
          <meta name='description' content='Generated by create-t3-app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
        <Layout>
          <main className='container mx-auto flex flex-col items-center justify-center min-h-screen'>
            <div className=''>
              <h1 className=''>recent lists</h1>
              <CreateRecipePopover />

              {recentRecipes}
            </div>
          </main>
        </Layout>
      </>
    )
  }

  return 'is loading..'
}

function CreateRecipePopover() {
  const [isOpen, setIsOpen] = useState(false)
  const steps: TotalSteps = {
    first: {
      key: 'first',
      next: 'second',
      prev: null,
      component: (
        <>
          {' '}
          <Dialog.Title
            as='h3'
            className='text-lg font-medium leading-6 text-gray-900'
          >
            Upload a recipe
          </Dialog.Title>
          <UploadRecipeUrlForm nextStep={nextStep} />
        </>
      )
    },
    second: {
      key: 'second',
      next: null,
      prev: 'first',
      component: (
        <>
          {' '}
          <Dialog.Title
            as='h3'
            className='text-lg font-medium leading-6 text-gray-900'
          >
            Upload a recipe
          </Dialog.Title>
          <CreateRecipe />
        </>
      )
    }
  } as const
  const [currentStep, setCurrentStep] = useState<Step | undefined>(steps.first)
  const [transitionSwitch, setTransitionSwitch] = useState(true)
  console.log('currentStep', currentStep)

  function closeModal() {
    setIsOpen(false)
    setTimeout(() => {
      // to show UI change after closing modal
      setCurrentStep(steps.first)
    }, 200)
  }

  function openModal() {
    setIsOpen(true)
  }

  function nextStep() {
    setTransitionSwitch(false)
  }

  function handleAfterLeave() {
    setTransitionSwitch(true)
    setCurrentStep((state) => steps[state?.next as keyof typeof steps])
  }

  return (
    <>
      <div className='flex items-center justify-center'>
        <button
          type='button'
          onClick={openModal}
          className='rounded-md bg-black bg-opacity-20 px-4 py-2 text-sm font-medium text-white hover:bg-opacity-30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75'
        >
          Open dialog
        </button>
      </div>

      <Transition appear show={isOpen} as={Fragment}>
        <Dialog as='div' className='relative z-10' onClose={closeModal}>
          <Transition.Child
            as={Fragment}
            enter='ease-out duration-300'
            enterFrom='opacity-0'
            enterTo='opacity-100'
            leave='ease-in duration-200'
            leaveFrom='opacity-100'
            leaveTo='opacity-0'
          >
            <div className='fixed inset-0 bg-black bg-opacity-25' />
          </Transition.Child>

          <div className='fixed inset-0 overflow-y-auto'>
            <div className='flex min-h-full items-center justify-center p-4 text-center'>
              <Transition.Child
                as={Fragment}
                enter='ease-out duration-300'
                enterFrom='opacity-0 scale-95'
                enterTo='opacity-100 scale-100'
                leave='ease-in duration-200'
                leaveFrom='opacity-100 scale-100'
                leaveTo='opacity-0 scale-95'
              >
                <Dialog.Panel className='w-full max-w-lg transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all min-h-[10rem]'>
                  <TransitionWrapper
                    transitionSwitch={transitionSwitch}
                    currentStep={currentStep}
                    handleAfterLeave={handleAfterLeave}
                    steps={steps}
                  />
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition>
    </>
  )
}

type ParseRecipeParams = z.infer<typeof ParseRecipeSchema>

const parseRecipe = (params: ParseRecipeParams) =>
  http.post<ParseRecipeParams, ParsedRecipe>(
    'http://localhost:3000/api/recipes/parse-url',
    params
  )

const useParseRecipe = (nextStep: () => void) =>
  useMutation({
    mutationFn: (params: ParseRecipeParams) => parseRecipe(params),
    onSuccess: (data: ParsedRecipe) => {
      queryClient.setQueryData(recipeKeys.parsed(), data)
      nextStep()
    }
  })

function UploadRecipeUrlForm({ nextStep }: { nextStep: () => void }) {
  const { register, handleSubmit } = useForm<ParseRecipeParams>()

  const { mutate, isLoading } = useParseRecipe(nextStep)
  return (
    <form onSubmit={handleSubmit((values) => mutate(values))} className=''>
      <div className='mt-2 flex flex-col gap-1'>
        <label htmlFor='url' className='text-sm text-gray-500'>
          Recipe URL
        </label>
        <input
          {...register('url')}
          className='text-gray-500'
          defaultValue='https://www.bbcgoodfood.com/recipes/spiced-carrot-lentil-soup'
        />
      </div>
      <div className='mt-4'>
        <Button
          props={{ type: 'submit', disabled: isLoading }}
          isLoading={isLoading}
        >
          {isLoading ? 'Uploading...' : 'Upload'}
        </Button>
      </div>
    </form>
  )
}

const createRecipe = (params: CreateRecipeParams) =>
  http.post<CreateRecipeParams, FetchRecipesRes[]>(
    'http://localhost:3000/api/recipes/create',
    params
  )

const useCreateRecipe = () =>
  useMutation({
    mutationFn: (params: CreateRecipeParams) => createRecipe(params)
  })

function CreateRecipe() {
  const parsedRecipe = queryClient.getQueryData<ParsedRecipe>(
    recipeKeys.parsed()
  )
  if (parsedRecipe) {
    return <CreateRecipeForm data={parsedRecipe} />
  }

  return <p>Loading...</p>
}

type FormValues = {
  name: string
  description: string
  instructions: string
  ingredients: string
}

function CreateRecipeForm({ data }: { data: ParsedRecipe }) {
  console.log('data', data)
  const [ingredientsPage, setIngredientsPage] = useState(0)
  const [instructionsPage, setInstructionsPage] = useState(0)
  const { register, handleSubmit, setValue, getValues } = useForm<FormValues>({
    defaultValues: {
      description: data.descriptions[0],
      name: data.names[0],
      ingredients: data.ingredients[0].join('\n'),
      instructions: data.instructions[0].join('\n')
    }
  })

  const { mutate, isLoading } = useCreateRecipe()

  const onSubmit = (values: FormValues) => {
    const params = {
      ...values,
      // TODO: do not hardcode
      userId: 1,
      ingredients: values.ingredients.split('\n'),
      instructions: values.instructions.split('\n')
    }
    mutate(params)
  }

  const changeIngredientsPage = () => {
    const ingredientsLength = data.ingredients.length
    const newState = (ingredientsPage + 1) & ingredientsLength
    setValue('ingredients', data.ingredients[newState].join('\n'))
    setIngredientsPage(newState)
  }

  const changeInstructionsPage = () => {
    const instructionsLength = data.instructions.length
    const newState = (instructionsPage + 1) & instructionsLength
    setValue('instructions', data.instructions[newState].join('\n'))
    setInstructionsPage(newState)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className='flex flex-col'>
      <div className='mt-2 flex flex-col'>
        <label htmlFor='name' className='text-sm text-gray-500'>
          Title
        </label>
        <input {...register('name')} className='text-gray-500' />
        <label htmlFor='name' className='text-sm text-gray-500'>
          Description
        </label>
        <input {...register('description')} className='text-gray-500' />
        <label htmlFor='ingredients' className='text-sm text-gray-500'>
          Ingredients
        </label>
        <textarea
          rows={getValues('ingredients').split('\n').length}
          {...register('ingredients')}
          className='text-gray-500 resize-none p-2 max-h-60'
        />
        <label htmlFor='instructions' className='text-sm text-gray-500'>
          Instructions
        </label>
        <textarea
          rows={getValues('instructions').split('\n').length}
          {...register('instructions')}
          className='text-gray-500 resize-none p-2 max-h-60'
        />
      </div>
      <Button props={{ type: 'button' }} onClick={changeIngredientsPage}>
        Next ingredients
      </Button>
      <Button props={{ type: 'button' }} onClick={changeInstructionsPage}>
        Next instructions
      </Button>
      <div className='mt-4'>
        <Button
          props={{ type: 'submit', disabled: isLoading }}
          isLoading={isLoading}
        >
          {isLoading ? 'Saving...' : 'Save'}
        </Button>
      </div>
    </form>
  )
}
