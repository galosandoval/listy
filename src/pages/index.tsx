import Head from 'next/head'
import Layout from './layout'
import {
  dehydrate,
  QueryClient,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import * as http from '../client'
import { Recipe } from '@prisma/client'
import { z } from 'zod'
import { RecipeSchema } from './api/recipes/create'

const recipeKeys = {
  all: ['recipes'] as const
}

type FetchRecipesReq = {
  userId: number
}

type FetchRecipesRes = {
  recipe: Recipe
}

const fetchRecipesParams = {
  userId: 1
}

const fetchRecipes = () =>
  http.post<FetchRecipesReq, FetchRecipesRes[]>(
    'http://localhost:3000/api/recipes',
    fetchRecipesParams
  )

const createRecipeParamsMock = {
  userId: 1,
  name: 'tst',
  url: 'https://www.foodandwine.com/recipes/mexican-chicken-pozole-verde'
}

type CreateRecipeParams = z.infer<typeof RecipeSchema>

const createRecipe = (params: CreateRecipeParams) =>
  http.post<CreateRecipeParams, Recipe>(
    'http://localhost:3000/api/recipes/create',
    params
  )

// mutation
const useCreateRecipe = () =>
  useMutation({
    mutationFn: (params: CreateRecipeParams) => createRecipe(params),
    onSuccess: (data: Recipe) => {
      console.log(data)
    }
  })

export async function getServerSideProps() {
  const queryClient = new QueryClient()
  await queryClient.prefetchQuery(recipeKeys.all, fetchRecipes)

  return {
    props: {
      dehydratedState: dehydrate(queryClient)
    }
  }
}

export default function Dashboard() {
  const {
    data: recipes,
    isError,
    isSuccess
  } = useQuery({
    queryKey: recipeKeys.all,
    queryFn: fetchRecipes
  })

  const recipe = useCreateRecipe()

  if (isError) {
    return 'Something went wrong'
  }

  if (isSuccess) {
    const recentRecipes = recipes.map((item) => (
      <div key={item.recipe.id} className=''>
        <h3 className=''>{item.recipe.name}</h3>
      </div>
    ))
    return (
      <>
        <Head>
          <title>Listy - Dashboard</title>
          <meta name='description' content='Generated by create-t3-app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
        <Layout>
          <main className='text-white container mx-auto flex flex-col items-center justify-center min-h-screen'>
            <div className=''>
              <h1 className=''>recent lists</h1>
              <button
                className=''
                onClick={() => recipe.mutate(createRecipeParamsMock)}
              >
                Create Recipe
              </button>
              {recentRecipes}
            </div>
          </main>
        </Layout>
      </>
    )
  }

  return 'is loading..'
}
